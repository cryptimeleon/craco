package de.upb.crypto.craco.abe.fuzzy.small;

import de.upb.crypto.craco.abe.fuzzy.large.Identity;
import de.upb.crypto.craco.interfaces.EncryptionKey;
import de.upb.crypto.craco.interfaces.abe.SetOfAttributes;
import de.upb.crypto.craco.interfaces.pe.CiphertextIndex;
import de.upb.crypto.math.interfaces.hash.ByteAccumulator;
import de.upb.crypto.math.serialization.Representation;
import de.upb.crypto.math.serialization.annotations.AnnotatedRepresentationUtil;
import de.upb.crypto.math.serialization.annotations.Represented;

/**
 * The {@link EncryptionKey} for the {@link IBEFuzzySW05Small}.
 * <p>
 * This Key is generated by
 * {@link IBEFuzzySW05Small#generateEncryptionKey(CiphertextIndex)}.
 *
 * @author Mirko JÃ¼rgens
 */
public class IBEFuzzySW05SmallEncryptionKey implements EncryptionKey {

    @Represented
    SetOfAttributes identity;

    public IBEFuzzySW05SmallEncryptionKey(SetOfAttributes id) {
        this.identity = id;
    }

    public IBEFuzzySW05SmallEncryptionKey(Representation repr) {
        AnnotatedRepresentationUtil.restoreAnnotatedRepresentation(repr, this);
    }

    @Override
    public Representation getRepresentation() {
        return AnnotatedRepresentationUtil.putAnnotatedRepresentation(this);
    }

    public SetOfAttributes getIdentity() {
        return identity;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((identity == null) ? 0 : identity.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        IBEFuzzySW05SmallEncryptionKey other = (IBEFuzzySW05SmallEncryptionKey) obj;
        if (identity == null) {
            if (other.identity != null)
                return false;
        } else if (!identity.containsAll(other.identity)
                || !other.identity.containsAll(identity))
            return false;
        return true;
    }

    @Override
    public ByteAccumulator updateAccumulator(ByteAccumulator accumulator) {
        return identity.updateAccumulator(accumulator);
    }

}
