package de.upb.crypto.craco.commitment.pedersen;

import de.upb.crypto.craco.commitment.interfaces.CommitmentSchemePublicParameters;
import de.upb.crypto.math.interfaces.structures.Group;
import de.upb.crypto.math.interfaces.structures.GroupElement;
import de.upb.crypto.math.serialization.Representation;
import de.upb.crypto.math.serialization.annotations.AnnotatedRepresentationUtil;
import de.upb.crypto.math.serialization.annotations.v2.ReprUtil;
import de.upb.crypto.math.serialization.annotations.v2.Represented;
import de.upb.crypto.math.serialization.annotations.RepresentedArray;
import de.upb.crypto.math.structures.zn.Zp;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Objects;

/**
 * This class encapsulates Pedersen public parameters generated by
 * {@link PedersenCommitmentSchemePublicParametersGen}. The {@link PedersenPublicParameters} are of the form
 * (g,G,H=(h0,h2, ... ,hk),p).
 * The attributes in the class are as follows:
 *
 * <ul>
 * <li><code>h</code> represents the list of H=(h0,h2, ... ,hk)</li>
 * <li><code>group</code> is the G</li>
 * <li><code>g</code> is the group generator</li>
 * </ul>
 */
public class PedersenPublicParameters implements CommitmentSchemePublicParameters {

    @Represented
    protected Group group;
    @Represented(restorer = "[group]")
    protected GroupElement[] h;
    @Represented(restorer = "group")
    protected GroupElement g;


    public PedersenPublicParameters(GroupElement g, GroupElement[] h, Group group) {
        this.g = g;
        this.h = h;
        this.group = group;
    }

    public PedersenPublicParameters(Representation repr) {
        new ReprUtil(this).deserialize(repr);
    }

    public GroupElement getG() {
        return g;
    }

    public GroupElement[] getH() {
        return h;
    }

    public Group getGroup() {
        return group;
    }

    public BigInteger getP() {
        return group.size();
    }

    public Zp getZp() {
        return new Zp(getP());
    }

    @Override
    public Representation getRepresentation() {
        return ReprUtil.serialize(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PedersenPublicParameters that = (PedersenPublicParameters) o;
        return Objects.equals(group, that.group) &&
                Arrays.equals(h, that.h) &&
                Objects.equals(g, that.g);
    }

    @Override
    public int hashCode() {
        int result = Objects.hash(group, g);
        result = 31 * result + Arrays.hashCode(h);
        return result;
    }
}
